module.exports = {
    NAME : "Vince Rickey",
    ABOUT : "Software Engineer with 6+ years of experience in Android & Mobile Development. Currently @WSJ",
    WSJ : "WSJ",
    OPEN_SOURCE : "Open Source",
    ANDROID : "Android",
    WEB : "Web",
    IOS : "iOS",
    RESUME : "Resume",
    REDESIGN_TITLE : "Redesign",
    REDESIGN_SUBTITLE: "Design System and Editorial Tools",
    REDESIGN_SUMMARY : "In 2017 and 2022, I worked with the Design team on a complete redesign of the app where we implemented new themes, cards, articles, fonts, and navigation. Each redesign worked seamlessly with features in our internal editorial tools - Mac and Web apps - that allow editors to configure both the types of cards in the news feed and the visibility, color, and other attributes to fit the news. For example, an editor can curate a specific story in the news feed by changing its card type from a Thumbnail Card to a Portrait Card, or changing its Headline to a “breaking red” color, then the apps will dynamically update their UI without an app release. As a result, there are thousands of possible card variants and a rich user experience created from a handful of static card types and components in our Design System. Today we are integrating Design Tokens and a new Component Design System across Web, iOS, and Android.",
    PURCHASING_TITLE : "Purchasing and Login",
    PURCHASING_SUBTITLE: "Auth0 and Google Play Billing",
    PURCHASING_SUMMARY : "There are many ways to subscribe to WSJ - through Google Play, the Apple App Store, web, phone, etc. - which leads to a complex login and entitlement system. In 2018/2019, I was the Mobile lead on an Identity project for mobile app store subscription purchases, registration, and login. We achieved our goal of unifying access to premium content across Android, iOS, and Web regardless of where the customer made their first purchase. The technical details included setting up Google Play Billing in-app purchases and receipt verification as well as a custom implementation of an Auth0/OAuth login system driven by idTokens.",
    ARCH_TITLE : "Architecture Discovery",
    ARCH_SUBTITLE: "MVP, MVVM, MVI to Jetpack Compose Platform",
    ARCH_SUMMARY : "The WSJ Android app is over 10 years old and that naturally means there is some tech debt to take care of after a few generations of teams. In 2019/2020, we started an architecture discovery process to reevaluate our data and UI flow from the ground up. By 2022, we brought the architecture from a single app module written in Java with an XML download system to a white-label, multi-module, GraphQL, fully Jetpack Compose mobile app platform with over 25 modules. It is used not only for the WSJ app, but as a white-label platform for other brands in the Dow Jones family such as Market Watch, Barrons, and FN London.",
    UI_TITLE : "Experimental R&D",
    UI_SUBTITLE: "Jetpack Compose and Swift UI",
    UI_SUMMARY : "In 2019 the Mobile team started a R&D effort to determine if it was possible to create Server-Driven UI (with native views) and completely remove app store releases from our process. We developed a working cutting edge feature: a Swift UI and Jetpack Compose Component Library driven by a JSON Declarative UI Model. While we decided against adopting this in favor of a white-label Jetpack Compose platform, we have embraced being early adopters of Swift UI and Jetpack Compose.",
    GRAPH_TITLE : "Graph QL",
    GRAPH_SUBTITLE: "Shared Data Layer",
    GRAPH_SUMMARY : "In 2020, the App & Web Engineering teams voted to retire our legacy backend content delivery systems and move to a shared content API with GraphQL. For Mobile, this allowed us to pass on the performance benefits (and cost savings) of a much smaller download size to our users. I was a Mobile representative for a company-wide move to GraphQL and suggested Apollo Federation as the best fit for our use cases across many Engineering teams with different requirements for their schema.",
    LFWK_NAME : "Leap for WaniKani",
    LFWK_SUMMARY : "Leap for WaniKani is an Android client app for WaniKani, a spaced repetition system used to learn Japanese characters. It’s written in Kotlin and uses MVVM, Coroutines, and LiveData.",
    COMPOSE_TITLE : "Jetpack Compose Cards",
    COMPOSE_SUMMARY : "A Jetpack Compose card system with JSON-driven card layouts and text styles.",
    ADAPTER_TITLE : "Adapter Delegate Cards",
    ADAPTER_SUMMARY : "A composition-over-inheritance RecyclerView which uses Components and model-driven styles. It's built with Hannes Dorfmann's library of the same name.",
    TWITTER_TITLE : "Twitter Username RxJava",
    TWITTER_SUMMARY : "A sample application that checks if a username is available on Twitter. It's written in Java and uses MVVM with RxJava.",
    RESUME_TITLE : "React-Bootstrap Resume Website",
    RESUME_SUMMARY : "This website was built using react-bootstrap.",
    URL_GITHUB : "https://github.com/vrickey123",
    URL_GITHUB_LFWK : "https://github.com/vrickey123/LeapForWaniKani",
    URL_PLAY_LFWK : "https://play.google.com/store/apps/details?id=com.leapsoftware.leapforwanikani&hl=en_US",
    URL_GITHUB_RESUME : "https://github.com/vrickey123/vrickey123.github.io",
    URL_GITHUB_COMPOSE : "https://github.com/vrickey123/JetpackComposeCards",
    URL_GITHUB_ADAPTER : "https://github.com/vrickey123/AdapterDelegateCards",
    URL_GITHUB_TWITTER : "https://github.com/vrickey123/TwitterUsername",
    URL_LINKEDIN : "https://www.linkedin.com/in/vincentrickey",
    URL_RESUME : "https://docs.google.com/document/d/1sODXvbf0u687PYut1KaJKPpaLDFIYJjszgkopTOiOMU/edit?usp=sharing",
    CONTACT : "Contact"
}